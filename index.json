

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

[{"categories":["数据库"],"description":"📚 数据冷热分离：用“断舍离”思维优化你的存储系统 大家好，我是小K，一个总在深夜和代码较劲的技术博主。今天想和大家聊聊一个看似高深、实则充满生","tags":["数据库"],"title":"数据冷热分离详解","url":"https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%86%B7%E7%83%AD%E5%88%86%E7%A6%BB%E8%AF%A6%E8%A7%A3/"},{"categories":["架构设计"],"description":"CDN 全面解析：原理、应用与最佳实践 在当今互联网时代，用户对网页加载速度和内容稳定性的要求越来越高。无论是电商平台的高清图片，还是在线视频的流畅","tags":["架构设计"],"title":"CDN 全面解析：原理、应用与最佳实践","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/cdn%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"},{"categories":["Java"],"description":"Java 21 新特性概览 1. JDK 21 概述 • 发布信息：2023年9月19日发布，是长期支持版本（LTS），目前LTS版本包括JDK 8、11、17和21。 • 核心","tags":["Java"],"title":"Java 21 新特性概览","url":"https://recordnote.github.io/java/java-21-%E6%96%B0%E7%89%B9%E6%80%A7%E6%A6%82%E8%A7%88%E9%87%8D%E8%A6%81/"},{"categories":["数据库"],"description":"深度分页问题及优化策略解析 一、深度分页问题概述 定义：深度分页指在数据库查询中，当使用 LIMIT offset, size 且偏移量（offset）极大时，导致查询性能显著下","tags":["数据库"],"title":"深度分页介绍及优化建议","url":"https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%B7%B1%E5%BA%A6%E5%88%86%E9%A1%B5%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/"},{"categories":["Java"],"description":"Java 17 新特性概览 一、版本背景与重要性 • 长期支持（LTS）：Java 17 是自 2021 年 9 月发布的 LTS 版本，支持至 2029 年 9 月，是继 Java 8 后最重要的 LTS 版本。 • 生态","tags":["Java"],"title":"Java 17 新特性概览","url":"https://recordnote.github.io/java/java-17-%E6%96%B0%E7%89%B9%E6%80%A7%E6%A6%82%E8%A7%88%E9%87%8D%E8%A6%81/"},{"categories":["架构设计"],"description":"统一权限系统设计详解 一、背景与挑战补充 原有分散权限系统的痛点深化 • 重复建设成本：各业务线独立开发权限系统导致资源浪费，维护成本高（如开发、测","tags":["架构设计"],"title":"权限设计详解","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3/"},{"categories":["架构设计"],"description":"负载均衡核心知识总结 一、什么是负载均衡？ • 定义：将用户请求分摊到不同服务器处理，提升系统并发处理能力和可靠性。 • 核心价值： • 提高系统可用性：","tags":["架构设计"],"title":"负载均衡原理及算法详解","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"},{"categories":["Java"],"description":"CompletableFuture 详解 1. 核心概念 • 异步编程模型：通过异步执行任务提升程序性能，避免线程阻塞等待。 • Future 的局限性： • 不支持任务编排（如链式调用、组合任务）。 • get()","tags":["Java"],"title":"CompletableFuture 详解","url":"https://recordnote.github.io/java/threadjuc/completablefuture-%E8%AF%A6%E8%A7%A3/"},{"categories":["Java"],"description":"Java 虚拟线程常见问题总结 1. 概述 • 定义：虚拟线程（Virtual Thread）是 Java 21 中引入的轻量级线程，由 JVM 调度，而非操作系统。多个虚拟线程共享","tags":["Java"],"title":"虚拟线程常见问题总结","url":"https://recordnote.github.io/java/threadjuc/%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"},{"categories":["Java"],"description":"ThreadLocal 详解总结 1. ThreadLocal 核心概念 • 线程局部变量：每个线程拥有独立的变量副本，实现线程间数据隔离。 • 存储结构：每个线程的 Thread 类维护一个 ThreadLoca","tags":["Java"],"title":"ThreadLocal 详解","url":"https://recordnote.github.io/java/threadjuc/threadlocal-%E8%AF%A6%E8%A7%A3/"},{"categories":["Java"],"description":"Java Atomic 原子类总结 一、概述 定义 Atomic 原子类位于 java.util.concurrent.atomic 包下，提供线程安全的原子操作，通过 CAS（Compare And Swap）和 volatile 实现无锁并发，避免传统锁机制","tags":["Java"],"title":"Atomic 原子类总结","url":"https://recordnote.github.io/java/threadjuc/atomic-%E5%8E%9F%E5%AD%90%E7%B1%BB%E6%80%BB%E7%BB%93/"},{"categories":["Java"],"description":"AQS（AbstractQueuedSynchronizer）核心原理与源码解析 一、AQS概述 定义与作用 • AQS是Java并发包中的基础框架","tags":["Java"],"title":"AQS 详解","url":"https://recordnote.github.io/java/threadjuc/aqs-%E8%AF%A6%E8%A7%A3/"},{"categories":["Java"],"description":"Java CAS 机制详解 一、CAS 概述 • 定义：Compare-And-Swap（比较并交换），一种无锁并发控制机制，属于乐观锁范畴。 • 核心思想：通过比较","tags":["Java"],"title":"CAS 详解","url":"https://recordnote.github.io/java/threadjuc/cas-%E8%AF%A6%E8%A7%A3/"},{"categories":["Java"],"description":"乐观锁和悲观锁详解 1. 核心概念对比 悲观锁（Pessimistic Lock） • 定义： 假设共享资源每次访问都会发生冲突，每次操作前加锁，其他线程需","tags":["Java"],"title":"乐观锁和悲观锁详解","url":"https://recordnote.github.io/java/threadjuc/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%E8%AF%A6%E8%A7%A3/"},{"categories":["Java"],"description":"JVM线上问题排查与性能调优实战案例解析 一、OOM问题排查系列案例 1.1 全表查询引发的雪崩式OOM（2023案例） 现象 线上服务接口响应时间异常飙","tags":["Java"],"title":"JVM线上问题排查和性能调优案例","url":"https://recordnote.github.io/java/jvm%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%A1%88%E4%BE%8B/"},{"categories":["Java"],"description":"最重要的JVM参数总结 堆内存配置 Java虚拟机所管理的内存中最大的一块，Java堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区","tags":["Java"],"title":"最重要的JVM参数总结","url":"https://recordnote.github.io/java/%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84jvm%E5%8F%82%E6%95%B0%E6%80%BB%E7%BB%93/"},{"categories":["Java"],"description":"类加载器详解 一、类加载过程回顾 1.1 核心三阶段 • 加载：获取类的二进制字节流 → 转换为方法区数据结构 → 生成Class对象 • 连接 • 验证：文件格式、元数","tags":["Java"],"title":"类加载器详解（重点）","url":"https://recordnote.github.io/java/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E8%AF%A6%E8%A7%A3%E9%87%8D%E7%82%B9/"},{"categories":["Java"],"description":"JVM垃圾回收详解（HotSpot虚拟机） 一、对象存活判定 引用计数法 • 原理：为对象添加引用计数器，引用时+1，失效时-1，计数器为0时判定可","tags":["Java"],"title":"JVM垃圾回收详解（重点）","url":"https://recordnote.github.io/java/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E8%AF%A6%E8%A7%A3%E9%87%8D%E7%82%B9/"},{"categories":["Java"],"description":"Java 内存区域详解（基于 HotSpot 虚拟机） 一、运行时数据区概述 Java 虚拟机（JVM）将内存划分为不同的数据区域，用于管理程序运行时的内存分配。根据 JDK 1.8 的规范","tags":["Java"],"title":"Java内存区域详解（重点）","url":"https://recordnote.github.io/java/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AF%A6%E8%A7%A3%E9%87%8D%E7%82%B9/"},{"categories":["Java"],"description":"Java 11 新特性概览 发布与支持 发布时间：2018年9月25日 长期支持（LTS）：Oracle官方支持至2026年9月 历史定位：Java 8之后首个长","tags":["Java"],"title":"Java 11 新特性概览","url":"https://recordnote.github.io/java/java-11-%E6%96%B0%E7%89%B9%E6%80%A7%E6%A6%82%E8%A7%88/"},{"categories":["Java"],"description":"Java 8 新特性实战指南 目录 接口的默认方法与静态方法 函数式接口与Lambda表达式 Stream API Optional类 新的日期时间API 接口的默认方法与静态方法","tags":["Java"],"title":"Java 8 新特性实战指南","url":"https://recordnote.github.io/java/java8-%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%9E%E6%88%98/"},{"categories":["前端"],"description":"传统的h5只有1端，即浏览器。而uni-app可跨多端，虽仍属前端，与传统h5有不同。 如果你对h5比较了解，可通过本文快速了解uni-app","tags":["前端"],"title":"白话uni-app","url":"https://recordnote.github.io/%E5%89%8D%E7%AB%AF/uni-app/"},{"categories":["数据库"],"description":"数据库中的例子表格： 1.符号 + 在MySQL中支持使用加号拼接结果。在两个字段都是整型时，都会返回两个整型值得和，但是在两个字段中有一个为字符","tags":["数据库"],"title":"sql如何拼接数据","url":"https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/sql%E5%A6%82%E4%BD%95%E6%8B%BC%E6%8E%A5%E6%95%B0%E6%8D%AE/"},{"categories":["架构设计"],"description":"1.业务背景： 传统方案在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识。如在美团点评的金融、支付、餐饮、酒店、猫眼电影等产品。对数","tags":["架构设计"],"title":"分布式ID","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/"},{"categories":["消息队列"],"description":"消息队列扫盲 消息队列顾名思义就是存放消息的队列， 消息队列为什么会出现？消息队列能用来干什么？用它来干这些事会带来什么好处？消息队列会带来副作","tags":["消息队列"],"title":"RockerMQ总结","url":"https://recordnote.github.io/java/mq/"},{"categories":["Spring框架"],"description":"Spring Boot Actuator可以帮助你监控和管理Spring Boot应用，比如健康检查、审计、统计和HTTP追踪等。所有的这些特性可以通过JMX或者","tags":["Spring"],"title":"Spring Boot Actuator:健康检查、审计、统计和监控","url":"https://recordnote.github.io/spring-cloud-alibaba/spring-actuator/"},{"categories":["spring"],"description":"由于工作上的原因，需要进行定时任务的动态增删改查，网上大部分资料都是整合quertz框架实现的。查阅了一些资料，发现springBoot本身","tags":["spring"],"title":"SpringBoot实现动态控制定时任务--支持多参数","url":"https://recordnote.github.io/java/springboot%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E6%8E%A7%E5%88%B6%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%94%AF%E6%8C%81%E5%A4%9A%E5%8F%82%E6%95%B0/"},{"categories":["微服务"],"description":"首先看一张图 。 什么是Spring cloud 构建分布式系统不需要复杂和容易出错。Spring Cloud 为最常见的分布式系统模式提供了一种简单且易于接受的编程模","tags":["微服务"],"title":"Spring Cloud 总结","url":"https://recordnote.github.io/spring-cloud-alibaba/springcloud%E7%BB%84%E4%BB%B6/"},{"categories":["Java"],"description":"Stream介绍 先说下Stream的优势：它是java对集合操作的优化，相较于迭代器，使用Stream的速度非常快，并且它支持并行方式处理集","tags":["Java"],"title":"jdk8特性-Stream常用方法和特性","url":"https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-stream%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%80%A7/"},{"categories":["微服务"],"description":"​ 1、雪崩效应（级联失效、级联故障） 2、服务容错的思想 超时 限流 仓壁模式（类似于为每个被调用的服务端api接口设置相应数量的线程池，当某个接口","tags":["微服务"],"title":"Sentinel（轻量级的流量控制、熔断降级Java库）","url":"https://recordnote.github.io/spring-cloud-alibaba/sentinel%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7java%E5%BA%93/"},{"categories":["数据库"],"description":"MVCC 是什么？ 数据库并发控制——锁 Multiversion (version) concurrency control (MCC or MVCC) 多版本并发控制 ，它是数据库管理系统一种常见的并发控制。 我们知道并发控制常用的是锁，当线程要对一个","tags":["数据库"],"title":"MVVC多版本并发控制","url":"https://recordnote.github.io/java/mvcc/"},{"categories":["微服务"],"description":"一、负载均衡的两种方式 二、Ribbon ribbon支持的配置： 例如： 内置的负载均衡规则，默认ZoneAvoidanceRule 扩展Ribbo","tags":["微服务"],"title":"负载均衡","url":"https://recordnote.github.io/spring-cloud-alibaba/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"},{"categories":["Java"],"description":"1. 代理模式 代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改","tags":["Java"],"title":"Java代理模式详解","url":"https://recordnote.github.io/java/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"},{"categories":["数据库"],"description":"索引 索引常见的几种类型 索引常见的类型有哈希索引，有序数组索引，二叉树索引，跳表等等。本文主要探讨 MySQL 的默认存储引擎 InnoDB 的索引结构。 InnoDB的","tags":["数据库"],"title":"MySQL中的索引和锁","url":"https://recordnote.github.io/java/mysql%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8C%E9%94%81/"},{"categories":["Java"],"description":"1、定义 ​ Optional 类 (java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在用 Optional 可以更好的表达这个概念；并且可以避免空指针异常 2、常","tags":["Java"],"title":"jdk8新特性-Optional类","url":"https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-optional%E7%B1%BB/"},{"categories":["spring"],"description":"一、@Resource和@Autowired的区别 1、@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写","tags":["spring"],"title":"spring常用注解","url":"https://recordnote.github.io/spring-cloud-alibaba/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"},{"categories":["Java"],"description":"1、线程实现的方式及其优缺点？ 1）继承Thread类 2）实现Runnable接口 3）实现Callable（JDK\u0026gt;=1.5） 4）使用线","tags":["Java"],"title":"多线程","url":"https://recordnote.github.io/java/threadjuc/thread/"},{"categories":["Java"],"description":"一、hashcode是什么？ 1、hash和hash表是什么？ ​ 想要知道这个hashcode，首先得知道hash，通过百度百科看一下 ​ ​ ​ ha","tags":["Java"],"title":"hashcode总结","url":"https://recordnote.github.io/java/hashcode/"},{"categories":["前端"],"description":"1 、WebStorm创建Vue项目目录结构 dist ：用于存放我们 使用 npm run build 命令 打包的项目文件 node_modules ：用于存放我们项目的 各种依赖，比如axios等等，没","tags":["前端"],"title":"Vue基础","url":"https://recordnote.github.io/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF/"},{"categories":["数据库"],"description":"redis两种持久化的方式 RDB持久化可以在指定的时间间隔内生成数据集的时间点快照 AOF持久化记录服务器执行的所有写操作命令，并在服务器启动","tags":["数据库"],"title":"redis两种持久化方式的优缺点","url":"https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/redis%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"},{"categories":["Java"],"description":"1、JDK、JRE、JVM之间的区别？ 2、JVM类加载过程 3、 JDK1.6、JDK1.7、JDK1.8 内存模型演变 这些版本的 JVM 内存模型主要有","tags":["Java"],"title":"JVM 虚拟机","url":"https://recordnote.github.io/jvm/jvm/"},{"categories":["架构设计"],"description":"ServiceMesh概念 服务网格 是概念，不是产品 解决网络层面的问题 代表项目 Linkerd 始于2016年的CNCF的官方项目 1.x基于节点（虚拟机、物理","tags":["架构设计"],"title":"ServiceMesh","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/servicemesh/"},{"categories":["架构设计"],"description":"","tags":["架构设计"],"title":"分布式","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"categories":["算法与数据结构"],"description":"1、Java双端队列Deque","tags":["算法与数据结构"],"title":"常用的数据结构","url":"https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["Java"],"description":"Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该","tags":["Java"],"title":"java基础知识","url":"https://recordnote.github.io/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"categories":["Java"],"description":"一，创建型/故事： 一个人“单例模式”根据一个工厂“工厂方法模式”的原型“原型模式”创建“建造者模式”出另一个工厂“抽象工厂”。 二，结构型/故","tags":["Java"],"title":"设计模式","url":"https://recordnote.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"categories":["运维"],"description":"k8s基本概念 k8s架构 Kubelet 节点代理，pod 管理，处理master中api-server下发的节点任务，每个节点都会启动 kubelet进程 容器","tags":["运维"],"title":"K8s","url":"https://recordnote.github.io/%E8%BF%90%E7%BB%B4/k8s/"},{"categories":["数据库"],"description":"​ Procedure Language 实际上是Oracle对SQL语言的能力扩展,让SQL语言拥有了if条件判断 , for循环等处理。 一、PLSQL基本语法 1 DECLARE 2 -- 声明部分 3","tags":["数据库"],"title":"Oracle PLSQL编程","url":"https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle_plsql/"},{"categories":["杂谈"],"description":"为了实现人机之间、人际之间任意时间、任意地点、任意语言的无障碍自由通讯的梦想,我们终日绞尽脑汁，时空距离被极大地压缩。但是，人与人之间的心理","tags":["杂谈"],"title":"人机关系到跨人际主体间关系","url":"https://recordnote.github.io/%E6%9D%82%E8%B0%88/%E4%BA%BA%E6%9C%BA%E5%85%B3%E7%B3%BB%E5%88%B0%E8%B7%A8%E4%BA%BA%E9%99%85%E4%B8%BB%E4%BD%93%E9%97%B4%E5%85%B3%E7%B3%BB/"},{"categories":["算法与数据结构"],"description":"1、JZ1 二维数组中的查找 描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序","tags":["算法与数据结构"],"title":"剑指offer算法题","url":"https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%91%E6%8C%87offer/"},{"categories":["架构","实战项目"],"description":"一、项目架构 \u0026gt; 二、数据库模型 三、技术选型及项目层级 项目层级： 四、业务","tags":["微服务"],"title":"小程序项目架构","url":"https://recordnote.github.io/spring-cloud-alibaba/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"},{"categories":["消息队列"],"description":"可以从下几个角度来考虑一下： 首先这个 mq 得支持可伸缩性吧，就是需要的时候快速扩容，就可以增加吞吐量和容量，那怎么搞？设计个分布式的系统呗，参照","tags":["消息队列"],"title":"如果让你写一个消息队列，该如何进行架构设计？","url":"https://recordnote.github.io/mq/mq-design/"},{"categories":["消息队列"],"description":"问题分析 数据的丢失问题，可能出现在生产者、MQ、消费者中，咱们从 RabbitMQ 和 Kafka 分别来分析一下吧。 RabbitMQ 生产者弄丢了数据 生产者将数据发送到 RabbitMQ 的时候，可能数","tags":["消息队列"],"title":"如何保证消息的可靠性传输？（处理消息丢失的问题）","url":"https://recordnote.github.io/mq/how-to-ensure-the-reliable-transmission-of-messages/"},{"categories":["消息队列"],"description":"大量消息在 mq 里积压了几个小时了还没解决 几千万条数据在 MQ 里积压了七八个小时，从下午 4 点多，积压到了晚上 11 点多。这个是真实遇到过的一个场景，确实","tags":["消息队列"],"title":"如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？","url":"https://recordnote.github.io/mq/mq-time-delay-and-expired-failure/"},{"categories":["消息队列"],"description":"线上系统场景案例 以前做过一个 mysql binlog 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（m","tags":["消息队列"],"title":"如何保证消息的顺序性？","url":"https://recordnote.github.io/mq/how-to-ensure-the-order-of-messages/"},{"categories":["消息队列"],"description":"首先，比如 RabbitMQ、RocketMQ、Kafka，都有可能会出现消息重复消费的问题，正常。因为这问题通常不是 MQ 自己保证的，是由我们开","tags":["消息队列"],"title":"如何保证消息不被重复消费？（如何保证消息消费的幂等性）","url":"https://recordnote.github.io/mq/how-to-ensure-that-messages-are-not-repeatedly-consumed/"},{"categories":["消息队列"],"description":"RabbitMQ 的高可用性 RabbitMQ 是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。 RabbitMQ 有三种模式：单机模","tags":["消息队列"],"title":"如何保证消息队列的高可用？","url":"https://recordnote.github.io/mq/how-to-ensure-high-availability-of-message-queues/"},{"categories":["架构","微服务"],"description":"1、定义 Feign是Netflix开源的声明式HTTP客户端 全局代码\u0026lt;全局属性\u0026lt;细粒度代码\u0026lt;细粒度属性 Feign常见问题总","tags":["微服务"],"title":"Feign 声明式HTTP客户端","url":"https://recordnote.github.io/spring-cloud-alibaba/feign/"},{"categories":["架构","微服务"],"description":"一、单体架构 1、优点： 架构简单 开发、测试、部署方便 2、缺点： 复杂性高 部署慢，频率低 扩展能力受限 阻碍技术创新 二、微服务 1、简单定义： ​ 微服务架","tags":["微服务"],"title":"单体架构与微服务架构","url":"https://recordnote.github.io/spring-cloud-alibaba/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"categories":["算法与数据结构"],"description":"1、快速排序 算法步骤 从数列中挑出一个元素，称为 \u0026ldquo;基准\u0026rdquo;（pivot）; 重新排序数列，所有元素比基准值小的摆放在基准前","tags":["算法与数据结构"],"title":"排序算法","url":"https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"categories":["算法与数据结构"],"description":"刷leetcode算法题的一点感悟 1. 开始很重要 先开始，先开始 不要说明天一定，下周一定，不要觉得自己的基础不够事先要补充算法/数据结构再开始，","tags":["算法与数据结构","感悟"],"title":"刷算法题的感悟","url":"https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E6%84%9F%E6%82%9F/"},{"categories":["数据库"],"description":"1、MyBatis中嵌套查询和嵌套结果的区别？ 最后一个问题是问Thread.sleep()和Object.wait()调用时线程处于什么状态","tags":["数据库"],"title":"MyBatis相关","url":"https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/mybatis/"},{"categories":["架构设计"],"description":"1.传统session session存在服务端tomcat里面，coockie存在客户端，请求过程如下： 第一次请求的时候，服务端设置sess","tags":["架构设计"],"title":"分布式session","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fsession/"},{"categories":["架构设计"],"description":"任务调度场景 报表，ex：电商系统的每周每月的订单量 日/月结单，ex：支付金融领域的系统 爬虫 数据归档，ex：将三个月前数据归档 非分布式任务调度","tags":["架构设计"],"title":"分布式任务调度","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"},{"categories":["禅修"],"description":"\u003cp\u003e记录一下我的丹东禅修之后的收获的东西，第一部分。\u003c/p\u003e","tags":["生活","感悟"],"title":"禅修一","url":"https://recordnote.github.io/posts/%E7%A6%85%E4%BF%AE-%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/"},{"categories":["禅修"],"description":"\u003cp\u003e这个曾经启发了我很多的博客，因为前几天发现它的网站 down 掉了，所以在此保存一份副本，侵删。\u003c/p\u003e","tags":["感悟"],"title":"如何冥想？2500年的智慧-荒岛十日记（转载）","url":"https://recordnote.github.io/posts/%E8%BD%AC%E8%BD%BD-%E5%A6%82%E4%BD%95%E5%86%A5%E6%83%B3-2500%E5%B9%B4%E7%9A%84%E6%99%BA%E6%85%A7-%E8%8D%92%E5%B2%9B%E5%8D%81%E6%97%A5%E8%AE%B0/"},{"categories":["消息队列"],"description":"为什么使用消息队列 消息队列有很多常见的使用场景，但是比较核心的有 3 个：解耦、异步、削峰。 解耦 看这么个场景。A 系统发送数据到 BCD 三个系统，通过接","tags":["消息队列"],"title":"为什么使用消息队列","url":"https://recordnote.github.io/mq/why-mq/"},{"categories":null,"description":"元数据","tags":null,"title":"","url":"https://recordnote.github.io/spring-cloud-alibaba/nacos/"},{"categories":null,"description":"","tags":null,"title":"","url":"https://recordnote.github.io/spring-cloud-alibaba/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"},{"categories":null,"description":"https://www.imooc.com/article/287865 RestTemplate 有空整理一下servlet相关问题 DDD领域模型 入门 jdk1.8 的新特性 lambda 表达式 Functional Interfaces Optionals Stream 流 Parallel-Streams 并行流 Spring： PostProcesser spring对象的生命周期 java 反射","tags":null,"title":"","url":"https://recordnote.github.io/spring-cloud-alibaba/%E9%97%AE%E9%A2%98/"},{"categories":null,"description":"uml 用例图 活动图 序列图","tags":null,"title":"","url":"https://recordnote.github.io/uml/uml/"},{"categories":null,"description":"","tags":null,"title":"","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84/"}]
