

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

[{"categories":["数据库"],"description":"redis两种持久化的方式 RDB持久化可以在指定的时间间隔内生成数据集的时间点快照 AOF持久化记录服务器执行的所有写操作命令，并在服务器启动","tags":["数据库"],"title":"redis两种持久化方式的优缺点","url":"https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/redis%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"},{"categories":["算法与数据结构"],"description":"1、Java双端队列Deque","tags":["算法与数据结构"],"title":"常用的数据结构","url":"https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"categories":["杂谈"],"description":"为了实现人机之间、人际之间任意时间、任意地点、任意语言的无障碍自由通讯的梦想,我们终日绞尽脑汁,时空距离被极大地压缩。但是,人与人之间的心理","tags":["杂谈"],"title":"人机关系到跨人际主体间关系","url":"https://recordnote.github.io/%E6%9D%82%E8%B0%88/%E4%BA%BA%E6%9C%BA%E5%85%B3%E7%B3%BB%E5%88%B0%E8%B7%A8%E4%BA%BA%E9%99%85%E4%B8%BB%E4%BD%93%E9%97%B4%E5%85%B3%E7%B3%BB/"},{"categories":["Java"],"description":"一，创建型/故事： 一个人“单例模式”根据一个工厂“工厂方法模式”的原型“原型模式”创建“建造者模式”出另一个工厂“抽象工厂”。 二，结构型/故","tags":["Java"],"title":"设计模式","url":"https://recordnote.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"categories":["Java"],"description":"","tags":["Java"],"title":"多线程","url":"https://recordnote.github.io/java/threadjuc/thread/"},{"categories":["算法与数据结构"],"description":"1、快速排序 算法步骤 从数列中挑出一个元素，称为 \u0026ldquo;基准\u0026rdquo;（pivot）; 重新排序数列，所有元素比基准值小的摆放在基准前","tags":["算法与数据结构"],"title":"排序算法","url":"https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"categories":["Java"],"description":"1、JDK、JRE、JVM之间的区别？ 2、JVM类加载过程 3、 JDK1.6、JDK1.7、JDK1.8 内存模型演变 这些版本的 JVM 内存模型主要有","tags":["Java"],"title":"JVM 虚拟机","url":"https://recordnote.github.io/jvm/jvm/"},{"categories":["算法与数据结构"],"description":"刷leetcode算法题的一点感悟 1. 开始很重要 先开始，先开始 不要说明天一定，下周一定，不要觉得自己的基础不够事先要补充算法/数据结构再开始，","tags":["算法与数据结构","感悟"],"title":"刷算法题的感悟","url":"https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E6%84%9F%E6%82%9F/"},{"categories":["运维"],"description":"k8s基本概念 k8s架构 Kubelet 节点代理，pod 管理，处理master中api-server下发的节点任务，每个节点都会启动 kubelet进程 容器","tags":["运维"],"title":"K8s","url":"https://recordnote.github.io/%E8%BF%90%E7%BB%B4/k8s/"},{"categories":["Java"],"description":"1. 代理模式 代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改","tags":["Java"],"title":"Java代理模式详解","url":"https://recordnote.github.io/java/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"},{"categories":["微服务"],"description":"​ 1、雪崩效应（级联失效、级联故障） 2、服务容错的思想 超时 限流 仓壁模式（类似于为每个被调用的服务端api接口设置相应数量的线程池，当某个接口","tags":["微服务"],"title":"Sentinel（轻量级的流量控制、熔断降级Java库）","url":"https://recordnote.github.io/spring-cloud-alibaba/sentinel%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7java%E5%BA%93/"},{"categories":["算法与数据结构"],"description":"1、JZ1 二维数组中的查找 描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序","tags":["算法与数据结构"],"title":"剑指offer算法题","url":"https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%91%E6%8C%87offer/"},{"categories":["数据库"],"description":"数据库中的例子表格： 1.符号 + 在MySQL中支持使用加号拼接结果。在两个字段都是整型时，都会返回两个整型值得和，但是在两个字段中有一个为字符","tags":["数据库"],"title":"sql如何拼接数据","url":"https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/sql%E5%A6%82%E4%BD%95%E6%8B%BC%E6%8E%A5%E6%95%B0%E6%8D%AE/"},{"categories":["架构","实战项目"],"description":"一、项目架构 \u0026gt; 二、数据库模型 三、技术选型及项目层级 项目层级： 四、业务","tags":["微服务"],"title":"小程序项目架构","url":"https://recordnote.github.io/spring-cloud-alibaba/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"},{"categories":["消息队列"],"description":"可以从下几个角度来考虑一下： 首先这个 mq 得支持可伸缩性吧，就是需要的时候快速扩容，就可以增加吞吐量和容量，那怎么搞？设计个分布式的系统呗，参照","tags":["消息队列"],"title":"如果让你写一个消息队列，该如何进行架构设计？","url":"https://recordnote.github.io/mq/mq-design/"},{"categories":["消息队列"],"description":"问题分析 数据的丢失问题，可能出现在生产者、MQ、消费者中，咱们从 RabbitMQ 和 Kafka 分别来分析一下吧。 RabbitMQ 生产者弄丢了数据 生产者将数据发送到 RabbitMQ 的时候，可能数","tags":["消息队列"],"title":"如何保证消息的可靠性传输？（处理消息丢失的问题）","url":"https://recordnote.github.io/mq/how-to-ensure-the-reliable-transmission-of-messages/"},{"categories":["消息队列"],"description":"大量消息在 mq 里积压了几个小时了还没解决 几千万条数据在 MQ 里积压了七八个小时，从下午 4 点多，积压到了晚上 11 点多。这个是真实遇到过的一个场景，确实","tags":["消息队列"],"title":"如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？","url":"https://recordnote.github.io/mq/mq-time-delay-and-expired-failure/"},{"categories":["消息队列"],"description":"线上系统场景案例 以前做过一个 mysql binlog 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（m","tags":["消息队列"],"title":"如何保证消息的顺序性？","url":"https://recordnote.github.io/mq/how-to-ensure-the-order-of-messages/"},{"categories":["消息队列"],"description":"首先，比如 RabbitMQ、RocketMQ、Kafka，都有可能会出现消息重复消费的问题，正常。因为这问题通常不是 MQ 自己保证的，是由我们开","tags":["消息队列"],"title":"如何保证消息不被重复消费？（如何保证消息消费的幂等性）","url":"https://recordnote.github.io/mq/how-to-ensure-that-messages-are-not-repeatedly-consumed/"},{"categories":["消息队列"],"description":"RabbitMQ 的高可用性 RabbitMQ 是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。 RabbitMQ 有三种模式：单机模","tags":["消息队列"],"title":"如何保证消息队列的高可用？","url":"https://recordnote.github.io/mq/how-to-ensure-high-availability-of-message-queues/"},{"categories":["Java"],"description":"一、hashcode是什么？ 1、hash和hash表是什么？ ​ 想要知道这个hashcode，首先得知道hash，通过百度百科看一下 ​ ​ ​ ha","tags":["Java"],"title":"hashcode总结","url":"https://recordnote.github.io/java/hashcode/"},{"categories":["架构","微服务"],"description":"1、定义 Feign是Netflix开源的声明式HTTP客户端 全局代码\u0026lt;全局属性\u0026lt;细粒度代码\u0026lt;细粒度属性 Feign常见问题总","tags":["微服务"],"title":"Feign 声明式HTTP客户端","url":"https://recordnote.github.io/spring-cloud-alibaba/feign/"},{"categories":["架构","微服务"],"description":"一、单体架构 1、优点： 架构简单 开发、测试、部署方便 2、缺点： 复杂性高 部署慢，频率低 扩展能力受限 阻碍技术创新 二、微服务 1、简单定义： ​ 微服务架","tags":["微服务"],"title":"单体架构与微服务架构","url":"https://recordnote.github.io/spring-cloud-alibaba/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"categories":["Spring框架"],"description":"Spring Boot Actuator可以帮助你监控和管理Spring Boot应用，比如健康检查、审计、统计和HTTP追踪等。所有的这些特性可以通过JMX或者","tags":["Spring"],"title":"Spring Boot Actuator:健康检查、审计、统计和监控","url":"https://recordnote.github.io/spring-cloud-alibaba/spring-actuator/"},{"categories":["spring"],"description":"一、@Resource和@Autowired的区别 1、@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写","tags":["spring"],"title":"spring常用注解","url":"https://recordnote.github.io/spring-cloud-alibaba/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"},{"categories":["微服务"],"description":"一、负载均衡的两种方式 二、Ribbon ribbon支持的配置： 例如： 内置的负载均衡规则，默认ZoneAvoidanceRule 扩展Ribbo","tags":["微服务"],"title":"负载均衡","url":"https://recordnote.github.io/spring-cloud-alibaba/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"},{"categories":["Java"],"description":"Stream介绍 先说下Stream的优势：它是java对集合操作的优化，相较于迭代器，使用Stream的速度非常快，并且它支持并行方式处理集","tags":["Java"],"title":"jdk8新特性-Stream常用方法和特性","url":"https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-stream%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%80%A7/"},{"categories":["Java"],"description":"1、定义 ​ Optional 类 (java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在用 Optional 可以更好的表达这个概念；并且可以避免空指针异常 2、常","tags":["Java"],"title":"jdk8新特性-Optional类","url":"https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-optional%E7%B1%BB/"},{"categories":["Java"],"description":"Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该","tags":["Java"],"title":"java基础知识","url":"https://recordnote.github.io/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"categories":["消息队列"],"description":"为什么使用消息队列 消息队列有很多常见的使用场景，但是比较核心的有 3 个：解耦、异步、削峰。 解耦 看这么个场景。A 系统发送数据到 BCD 三个系统，通过接","tags":["消息队列"],"title":"为什么使用消息队列","url":"https://recordnote.github.io/mq/why-mq/"},{"categories":["禅修"],"description":"\u003cp\u003e这个曾经启发了我很多的博客，因为前几天发现它的网站 down 掉了，所以在此保存一份副本，侵删。\u003c/p\u003e","tags":["感悟"],"title":"如何冥想？2500年的智慧-荒岛十日记（转载）","url":"https://recordnote.github.io/posts/%E8%BD%AC%E8%BD%BD-%E5%A6%82%E4%BD%95%E5%86%A5%E6%83%B3-2500%E5%B9%B4%E7%9A%84%E6%99%BA%E6%85%A7-%E8%8D%92%E5%B2%9B%E5%8D%81%E6%97%A5%E8%AE%B0/"},{"categories":["禅修"],"description":"\u003cp\u003e记录一下我的丹东禅修之后的收获的东西，第一部分。\u003c/p\u003e","tags":["生活","感悟"],"title":"禅修一","url":"https://recordnote.github.io/posts/%E7%A6%85%E4%BF%AE-%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/"},{"categories":null,"description":"元数据","tags":null,"title":"","url":"https://recordnote.github.io/spring-cloud-alibaba/nacos/"},{"categories":null,"description":"","tags":null,"title":"","url":"https://recordnote.github.io/spring-cloud-alibaba/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"},{"categories":null,"description":"","tags":null,"title":"","url":"https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84/"}]
