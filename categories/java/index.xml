<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Aaron 的博客</title>
    <link>https://recordnote.github.io/categories/java/</link>
    <description>Recent content in Java on Aaron 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;br /&gt;&lt;br /&gt;背景使用了 &lt;a href=&#34;https://www.pexels.com/zh-cn/&#34; target=&#34;_blank&#34;&gt;Pexels&lt;/a&gt; 上 &lt;a href=&#34;https://www.pexels.com/zh-cn/Ungaro&#34; target=&#34;_blank&#34;&gt;Francesco Ungaro&lt;/a&gt; 拍摄的&lt;a href=&#34;https://www.pexels.com/zh-cn/photo/1454794/&#34; target=&#34;_blank&#34;&gt;图片&lt;/a&gt;。</copyright>
    <lastBuildDate>Wed, 28 Jun 2023 14:21:26 +0800</lastBuildDate><atom:link href="https://recordnote.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>jdk8新特性-Stream常用方法和特性</title>
      <link>https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-stream%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%80%A7/</link>
      <pubDate>Wed, 28 Jun 2023 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-stream%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%80%A7/</guid>
      <description>Stream介绍 先说下Stream的优势：它是java对集合操作的优化，相较于迭代器，使用Stream的速度非常快，并且它支持并行方式处理集</description>
    </item>
    
    <item>
      <title>jdk8新特性-Optional类</title>
      <link>https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-optional%E7%B1%BB/</link>
      <pubDate>Wed, 14 Jun 2023 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-optional%E7%B1%BB/</guid>
      <description>1、定义 ​ Optional 类 (java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在用 Optional 可以更好的表达这个概念；并且可以避免空指针异常 2、常</description>
    </item>
    
    <item>
      <title>Java代理模式详解</title>
      <link>https://recordnote.github.io/java/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 01 Jun 2023 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 代理模式 代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改</description>
    </item>
    
    <item>
      <title>hashcode总结</title>
      <link>https://recordnote.github.io/java/hashcode/</link>
      <pubDate>Thu, 23 Mar 2023 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/hashcode/</guid>
      <description>一、hashcode是什么？ 1、hash和hash表是什么？ ​ 想要知道这个hashcode，首先得知道hash，通过百度百科看一下 ​ ​ ​ ha</description>
    </item>
    
    <item>
      <title>JVM 虚拟机</title>
      <link>https://recordnote.github.io/jvm/jvm/</link>
      <pubDate>Fri, 01 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/jvm/jvm/</guid>
      <description>1、JDK、JRE、JVM之间的区别？ 2、JVM类加载过程 3、 JDK1.6、JDK1.7、JDK1.8 内存模型演变 这些版本的 JVM 内存模型主要有</description>
    </item>
    
    <item>
      <title>java基础知识</title>
      <link>https://recordnote.github.io/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 23 May 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://recordnote.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 15 May 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>一，创建型/故事： 一个人“单例模式”根据一个工厂“工厂方法模式”的原型“原型模式”创建“建造者模式”出另一个工厂“抽象工厂”。 二，结构型/故</description>
    </item>
    
    <item>
      <title>多线程</title>
      <link>https://recordnote.github.io/java/threadjuc/thread/</link>
      <pubDate>Sun, 01 May 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/threadjuc/thread/</guid>
      <description>1、线程实现的方式及其优缺点？ 1）继承Thread类 2）实现Runnable接口 3）实现Callable（JDK&amp;gt;=1.5） 4）使用线</description>
    </item>
    
  </channel>
</rss>
