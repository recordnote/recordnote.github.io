<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aaron 的博客</title>
    <link>https://recordnote.github.io/</link>
    <description>Recent content on Aaron 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;br /&gt;&lt;br /&gt;背景使用了 &lt;a href=&#34;https://www.pexels.com/zh-cn/&#34; target=&#34;_blank&#34;&gt;Pexels&lt;/a&gt; 上 &lt;a href=&#34;https://www.pexels.com/zh-cn/Ungaro&#34; target=&#34;_blank&#34;&gt;Francesco Ungaro&lt;/a&gt; 拍摄的&lt;a href=&#34;https://www.pexels.com/zh-cn/photo/1454794/&#34; target=&#34;_blank&#34;&gt;图片&lt;/a&gt;。</copyright>
    <lastBuildDate>Wed, 01 Mar 2023 14:21:26 +0800</lastBuildDate><atom:link href="https://recordnote.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java代理模式详解</title>
      <link>https://recordnote.github.io/java/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Mar 2023 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 代理模式 代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改</description>
    </item>
    
    <item>
      <title>hashcode总结</title>
      <link>https://recordnote.github.io/java/hashcode/</link>
      <pubDate>Mon, 23 Jan 2023 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/hashcode/</guid>
      <description>一、hashcode是什么？ 1、hash和hash表是什么？ ​ 想要知道这个hashcode，首先得知道hash，通过百度百科看一下 ​ ​ ​ ha</description>
    </item>
    
    <item>
      <title>Vue基础</title>
      <link>https://recordnote.github.io/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF/</link>
      <pubDate>Thu, 15 Dec 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF/</guid>
      <description>1 、WebStorm创建Vue项目目录结构 dist:用于存放我们 使用 npm run build 命令打包的项目文件 node_modules:用于存放我们项目的各种</description>
    </item>
    
    <item>
      <title>Spring Boot Actuator:健康检查、审计、统计和监控</title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/spring-actuator/</link>
      <pubDate>Thu, 01 Dec 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/spring-actuator/</guid>
      <description>Spring Boot Actuator可以帮助你监控和管理Spring Boot应用，比如健康检查、审计、统计和HTTP追踪等。所有的这些特性可以通过JMX或者</description>
    </item>
    
    <item>
      <title>spring常用注解</title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Wed, 23 Nov 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</guid>
      <description>一、@Resource和@Autowired的区别 1、@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写</description>
    </item>
    
    <item>
      <title>负载均衡</title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
      <pubDate>Sun, 23 Oct 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
      <description>一、负载均衡的两种方式 二、Ribbon ribbon支持的配置： 例如： 内置的负载均衡规则，默认ZoneAvoidanceRule 扩展Ribbo</description>
    </item>
    
    <item>
      <title>Spring Cloud 总结</title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/springcloud%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 20 Oct 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/springcloud%E7%BB%84%E4%BB%B6/</guid>
      <description>首先我给大家看一张图，如果大家对这张图有些地方不太理解的话，我希望你们看完我这篇文章会恍然大悟。 什么是Spring cloud 构建分布式系统不需要复杂</description>
    </item>
    
    <item>
      <title>ServiceMesh</title>
      <link>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/servicemesh/</link>
      <pubDate>Fri, 05 Aug 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/servicemesh/</guid>
      <description>ServiceMesh概念 服务网格 是概念，不是产品 解决网络层面的问题 代表项目 Linkerd 始于2016年的CNCF的官方项目 1.x基于节点（虚拟机、物理</description>
    </item>
    
    <item>
      <title>jdk8新特性-Stream常用方法和特性</title>
      <link>https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-stream%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sun, 31 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-stream%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%80%A7/</guid>
      <description>Stream介绍 先说下Stream的优势：它是java对集合操作的优化，相较于迭代器，使用Stream的速度非常快，并且它支持并行方式处理集</description>
    </item>
    
    <item>
      <title>redis两种持久化方式的优缺点</title>
      <link>https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/redis%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</link>
      <pubDate>Sun, 31 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/redis%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</guid>
      <description>redis两种持久化的方式 RDB持久化可以在指定的时间间隔内生成数据集的时间点快照 AOF持久化记录服务器执行的所有写操作命令，并在服务器启动</description>
    </item>
    
    <item>
      <title>分布式</title>
      <link>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
      <pubDate>Sun, 31 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分布式ID</title>
      <link>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/</link>
      <pubDate>Sun, 31 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/</guid>
      <description>1.业务背景： 传统方案在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识。如在美团点评的金融、支付、餐饮、酒店、猫眼电影等产品。对数</description>
    </item>
    
    <item>
      <title>jdk8新特性-Optional类</title>
      <link>https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-optional%E7%B1%BB/</link>
      <pubDate>Sat, 23 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/jdk8%E6%96%B0%E7%89%B9%E6%80%A7-optional%E7%B1%BB/</guid>
      <description>1、定义 ​ Optional 类 (java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在用 Optional 可以更好的表达这个概念；并且可以避免空指针异常 2、常</description>
    </item>
    
    <item>
      <title>sql如何拼接数据</title>
      <link>https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/sql%E5%A6%82%E4%BD%95%E6%8B%BC%E6%8E%A5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sat, 23 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/sql%E5%A6%82%E4%BD%95%E6%8B%BC%E6%8E%A5%E6%95%B0%E6%8D%AE/</guid>
      <description>数据库中的例子表格： 1.符号 + 在MySQL中支持使用加号拼接结果。在两个字段都是整型时，都会返回两个整型值得和，但是在两个字段中有一个为字符</description>
    </item>
    
    <item>
      <title>常用的数据结构</title>
      <link>https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 15 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>1、Java双端队列Deque</description>
    </item>
    
    <item>
      <title>JVM 虚拟机</title>
      <link>https://recordnote.github.io/jvm/jvm/</link>
      <pubDate>Fri, 01 Jul 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/jvm/jvm/</guid>
      <description>1、JDK、JRE、JVM之间的区别？ 2、JVM类加载过程 3、 JDK1.6、JDK1.7、JDK1.8 内存模型演变 这些版本的 JVM 内存模型主要有</description>
    </item>
    
    <item>
      <title>java基础知识</title>
      <link>https://recordnote.github.io/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 23 May 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://recordnote.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 15 May 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>一，创建型/故事： 一个人“单例模式”根据一个工厂“工厂方法模式”的原型“原型模式”创建“建造者模式”出另一个工厂“抽象工厂”。 二，结构型/故</description>
    </item>
    
    <item>
      <title>多线程</title>
      <link>https://recordnote.github.io/java/threadjuc/thread/</link>
      <pubDate>Sun, 01 May 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/java/threadjuc/thread/</guid>
      <description>1、线程实现的方式及其优缺点？ 1）继承Thread类 2）实现Runnable接口 3）实现Callable（JDK&amp;gt;=1.5） 4）使用线</description>
    </item>
    
    <item>
      <title>K8s</title>
      <link>https://recordnote.github.io/%E8%BF%90%E7%BB%B4/k8s/</link>
      <pubDate>Thu, 31 Mar 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E8%BF%90%E7%BB%B4/k8s/</guid>
      <description>k8s基本概念 k8s架构 Kubelet 节点代理，pod 管理，处理master中api-server下发的节点任务，每个节点都会启动 kubelet进程 容器</description>
    </item>
    
    <item>
      <title>Oracle PLSQL编程</title>
      <link>https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle_plsql/</link>
      <pubDate>Wed, 23 Mar 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/oracle_plsql/</guid>
      <description>​ Procedure Language 实际上是Oracle对SQL语言的能力扩展,让SQL语言拥有了if条件判断 , for循环等处理。 一、PLSQL基本语法 1 DECLARE 2 -- 声明部分 3</description>
    </item>
    
    <item>
      <title>人机关系到跨人际主体间关系</title>
      <link>https://recordnote.github.io/%E6%9D%82%E8%B0%88/%E4%BA%BA%E6%9C%BA%E5%85%B3%E7%B3%BB%E5%88%B0%E8%B7%A8%E4%BA%BA%E9%99%85%E4%B8%BB%E4%BD%93%E9%97%B4%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Fri, 04 Mar 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E6%9D%82%E8%B0%88/%E4%BA%BA%E6%9C%BA%E5%85%B3%E7%B3%BB%E5%88%B0%E8%B7%A8%E4%BA%BA%E9%99%85%E4%B8%BB%E4%BD%93%E9%97%B4%E5%85%B3%E7%B3%BB/</guid>
      <description>为了实现人机之间、人际之间任意时间、任意地点、任意语言的无障碍自由通讯的梦想,我们终日绞尽脑汁，时空距离被极大地压缩。但是，人与人之间的心理</description>
    </item>
    
    <item>
      <title>Sentinel（轻量级的流量控制、熔断降级Java库）</title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/sentinel%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7java%E5%BA%93/</link>
      <pubDate>Tue, 01 Mar 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/sentinel%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7java%E5%BA%93/</guid>
      <description>​ 1、雪崩效应（级联失效、级联故障） 2、服务容错的思想 超时 限流 仓壁模式（类似于为每个被调用的服务端api接口设置相应数量的线程池，当某个接口</description>
    </item>
    
    <item>
      <title>剑指offer算法题</title>
      <link>https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%91%E6%8C%87offer/</link>
      <pubDate>Tue, 01 Mar 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%91%E6%8C%87offer/</guid>
      <description>1、JZ1 二维数组中的查找 描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序</description>
    </item>
    
    <item>
      <title>小程序项目架构</title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 01 Feb 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/</guid>
      <description>一、项目架构 &amp;gt; 二、数据库模型 三、技术选型及项目层级 项目层级： 四、业务</description>
    </item>
    
    <item>
      <title>如果让你写一个消息队列，该如何进行架构设计？</title>
      <link>https://recordnote.github.io/mq/mq-design/</link>
      <pubDate>Fri, 28 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/mq/mq-design/</guid>
      <description>可以从下几个角度来考虑一下： 首先这个 mq 得支持可伸缩性吧，就是需要的时候快速扩容，就可以增加吞吐量和容量，那怎么搞？设计个分布式的系统呗，参照</description>
    </item>
    
    <item>
      <title>如何保证消息的可靠性传输？（处理消息丢失的问题）</title>
      <link>https://recordnote.github.io/mq/how-to-ensure-the-reliable-transmission-of-messages/</link>
      <pubDate>Thu, 27 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/mq/how-to-ensure-the-reliable-transmission-of-messages/</guid>
      <description>问题分析 数据的丢失问题，可能出现在生产者、MQ、消费者中，咱们从 RabbitMQ 和 Kafka 分别来分析一下吧。 RabbitMQ 生产者弄丢了数据 生产者将数据发送到 RabbitMQ 的时候，可能数</description>
    </item>
    
    <item>
      <title>如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？</title>
      <link>https://recordnote.github.io/mq/mq-time-delay-and-expired-failure/</link>
      <pubDate>Thu, 27 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/mq/mq-time-delay-and-expired-failure/</guid>
      <description>大量消息在 mq 里积压了几个小时了还没解决 几千万条数据在 MQ 里积压了七八个小时，从下午 4 点多，积压到了晚上 11 点多。这个是真实遇到过的一个场景，确实</description>
    </item>
    
    <item>
      <title>如何保证消息的顺序性？</title>
      <link>https://recordnote.github.io/mq/how-to-ensure-the-order-of-messages/</link>
      <pubDate>Wed, 26 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/mq/how-to-ensure-the-order-of-messages/</guid>
      <description>线上系统场景案例 以前做过一个 mysql binlog 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（m</description>
    </item>
    
    <item>
      <title>如何保证消息不被重复消费？（如何保证消息消费的幂等性）</title>
      <link>https://recordnote.github.io/mq/how-to-ensure-that-messages-are-not-repeatedly-consumed/</link>
      <pubDate>Tue, 25 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/mq/how-to-ensure-that-messages-are-not-repeatedly-consumed/</guid>
      <description>首先，比如 RabbitMQ、RocketMQ、Kafka，都有可能会出现消息重复消费的问题，正常。因为这问题通常不是 MQ 自己保证的，是由我们开</description>
    </item>
    
    <item>
      <title>如何保证消息队列的高可用？</title>
      <link>https://recordnote.github.io/mq/how-to-ensure-high-availability-of-message-queues/</link>
      <pubDate>Mon, 24 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/mq/how-to-ensure-high-availability-of-message-queues/</guid>
      <description>RabbitMQ 的高可用性 RabbitMQ 是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。 RabbitMQ 有三种模式：单机模</description>
    </item>
    
    <item>
      <title>Feign 声明式HTTP客户端</title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/feign/</link>
      <pubDate>Sat, 01 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/feign/</guid>
      <description>1、定义 Feign是Netflix开源的声明式HTTP客户端 全局代码&amp;lt;全局属性&amp;lt;细粒度代码&amp;lt;细粒度属性 Feign常见问题总</description>
    </item>
    
    <item>
      <title>单体架构与微服务架构</title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 01 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</guid>
      <description>一、单体架构 1、优点： 架构简单 开发、测试、部署方便 2、缺点： 复杂性高 部署慢，频率低 扩展能力受限 阻碍技术创新 二、微服务 1、简单定义： ​ 微服务架</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 02 Dec 2021 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>1、快速排序 算法步骤 从数列中挑出一个元素，称为 &amp;ldquo;基准&amp;rdquo;（pivot）; 重新排序数列，所有元素比基准值小的摆放在基准前</description>
    </item>
    
    <item>
      <title>刷算法题的感悟</title>
      <link>https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E6%84%9F%E6%82%9F/</link>
      <pubDate>Thu, 01 Apr 2021 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E6%84%9F%E6%82%9F/</guid>
      <description>刷leetcode算法题的一点感悟 1. 开始很重要 先开始，先开始 不要说明天一定，下周一定，不要觉得自己的基础不够事先要补充算法/数据结构再开始，</description>
    </item>
    
    <item>
      <title>MyBatis相关</title>
      <link>https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/mybatis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://recordnote.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93/mybatis/</guid>
      <description>1、MyBatis中嵌套查询和嵌套结果的区别？ 最后一个问题是问Thread.sleep()和Object.wait()调用时线程处于什么状态</description>
    </item>
    
    <item>
      <title>分布式session</title>
      <link>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fsession/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fsession/</guid>
      <description>1.传统session session存在服务端tomcat里面，coockie存在客户端，请求过程如下： 第一次请求的时候，服务端设置sess</description>
    </item>
    
    <item>
      <title>分布式任务调度</title>
      <link>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</guid>
      <description>任务调度场景 报表，ex：电商系统的每周每月的订单量 日/月结单，ex：支付金融领域的系统 爬虫 数据归档，ex：将三个月前数据归档 非分布式任务调度</description>
    </item>
    
    <item>
      <title>禅修一</title>
      <link>https://recordnote.github.io/posts/%E7%A6%85%E4%BF%AE-%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/</link>
      <pubDate>Thu, 28 Apr 2022 11:08:58 +0800</pubDate>
      
      <guid>https://recordnote.github.io/posts/%E7%A6%85%E4%BF%AE-%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/</guid>
      <description>&lt;p&gt;记录一下我的丹东禅修之后的收获的东西，第一部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何冥想？2500年的智慧-荒岛十日记（转载）</title>
      <link>https://recordnote.github.io/posts/%E8%BD%AC%E8%BD%BD-%E5%A6%82%E4%BD%95%E5%86%A5%E6%83%B3-2500%E5%B9%B4%E7%9A%84%E6%99%BA%E6%85%A7-%E8%8D%92%E5%B2%9B%E5%8D%81%E6%97%A5%E8%AE%B0/</link>
      <pubDate>Sun, 20 Mar 2022 22:02:47 +0800</pubDate>
      
      <guid>https://recordnote.github.io/posts/%E8%BD%AC%E8%BD%BD-%E5%A6%82%E4%BD%95%E5%86%A5%E6%83%B3-2500%E5%B9%B4%E7%9A%84%E6%99%BA%E6%85%A7-%E8%8D%92%E5%B2%9B%E5%8D%81%E6%97%A5%E8%AE%B0/</guid>
      <description>&lt;p&gt;这个曾经启发了我很多的博客，因为前几天发现它的网站 down 掉了，所以在此保存一份副本，侵删。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么使用消息队列</title>
      <link>https://recordnote.github.io/mq/why-mq/</link>
      <pubDate>Sun, 23 Jan 2022 14:21:26 +0800</pubDate>
      
      <guid>https://recordnote.github.io/mq/why-mq/</guid>
      <description>为什么使用消息队列 消息队列有很多常见的使用场景，但是比较核心的有 3 个：解耦、异步、削峰。 解耦 看这么个场景。A 系统发送数据到 BCD 三个系统，通过接</description>
    </item>
    
    <item>
      <title></title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/nacos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/nacos/</guid>
      <description>元数据</description>
    </item>
    
    <item>
      <title></title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://recordnote.github.io/spring-cloud-alibaba/%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://recordnote.github.io/spring-cloud-alibaba/%E9%97%AE%E9%A2%98/</guid>
      <description>https://www.imooc.com/article/287865 RestTemplate 有空整理一下servlet相关问题 DDD领域模型 入门 jdk1.8 的新特性 lambda 表达式 Functional Interfaces Optionals Stream 流 Parallel-Streams 并行流 Spring： PostProcesser spring对象的生命周期 java 反射</description>
    </item>
    
    <item>
      <title></title>
      <link>https://recordnote.github.io/uml/uml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://recordnote.github.io/uml/uml/</guid>
      <description>uml 用例图 活动图 序列图</description>
    </item>
    
    <item>
      <title></title>
      <link>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://recordnote.github.io/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
